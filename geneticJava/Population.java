package geneticJava;
import java.util.*;

/* In this class, we're going to take the inputs and call some methods like -
 * 1.) For Generating Population
 * 2.) For Calculating the fitness of all the chromosomes(our Phrases)
 * 3.) For Generating Mating Pool
 * 4.) Crossover
 * 5.) Mutation*/
class Population{
	
	String target;	//Our Phrase
	int popmax;		//Population Count
	float mutationRate;		//Mutation Rate
	String[] pop; 			//String array to hold the population
	static boolean isFinished = false;		//Check whether algorithm made our phrase or not
	int bestScore = 0;			//Holds the value of our phrase- like "abcd" will have a score of 4
	int isItTheBest = 0;		//Check whether the phrase made by algorithm is equal to bestScore or not
	int generations = 0;		//Keeps the count of generations
	DNA d = new DNA();			
	Random rand = new Random();

	//Constructor takes phrase, population and mutationRate
	public Population(String target, int popmax, float mutationRate) throws InterruptedException{
		this.target = target;
		this.popmax = popmax;
		this.mutationRate = mutationRate;
		pop = new String[popmax]; 	//Assigns the size of pop array according to the population
		bestScore = target.length();	//Assigns the score for our Phrase
		
		//Generating Population and storing in the pop array
		for (int i = 0; i < popmax; i++) {
			pop[i] = d.generatePopulation(target.length());
		}
		
		//For methods like fitness calculation, crossover and mutation
		GeneticAlgo();
	}
	
	private void calcFitness() {
		for (int i = 0; i < pop.length; i++) {
			isItTheBest = d.fitness(target, pop[i]);	//Store the score and check if it's best or not
			if(isItTheBest == bestScore){
				isFinished = true;			//If it is then set isFinished to true
				break;
			}
		}
	}
	
	public void GeneticAlgo() throws InterruptedException{
		while(!(isFinished)){
			calcFitness();		//Calculates fitness of every random phrase generated
			d.matingPoolGenerate();		//Generates mating Pool with the help of score
			
			//Performs crossover and mutation on phrases present in mating pool
			for(int i = 0; i < pop.length; i++){
				String child = d.crossover();
				pop[i] = d.mutation(mutationRate, child, target);
			}
			
			//After calculating fitness, crossover and mutation, 1 generation is completed
			generations++;
			
			//System.out.println("Generations: "+generations);	//Display generation count on console
			
			//Setting the Generation value on Label for GUI
			PhraseGui.genValue.setText(String.valueOf(generations));
			
			//To display the phrase being generated by the algorithm
			d.display();
			if(isItTheBest == bestScore){
				break;
			}
		}
	}

}
